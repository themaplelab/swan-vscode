{
	"name": "swan",
	"displayName": "SWAN",
	"description": "VSCode integration for SWAN - Swift static analysis",
	"version": "0.0.1",
	"engines": {
		"vscode": "^1.38.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onCommand:swan.runTaintAnalysis"
	],
	"main": "./out/swan.js",
	"contributes": {
		"commands": [
			{
				"command": "swan.startSWAN",
				"title": "Start SWAN"
			},
			{
				"command": "swan.stopSWAN",
				"title": "Stop SWAN"
			},
			{
				"command": "swan.runTaintAnalysis",
				"title": "Run Taint Analysis"
			},
			{
				"command": "swan.compile",
				"title": "Compile"
			}
		],
		"viewsContainers": {
			"activitybar": [
				{
					"id": "taintAnalysisContainer",
					"title": "Taint Analysis",
					"icon": "./resources/icons/viewIcon.png"
				}
			]
		},
		"views": {
			"taintAnalysisContainer": [
				{
					"id": "taintAnalysisSideBar",
					"name": "Paths"
				}
			]
		},
		"menus": {
			"view/title": [
				{
					"command": "swan.runTaintAnalysis",
					"when": "view == taintAnalysisSideBar"
				}
			],
			"commandPalette": [
				{
					"command": "swan.startSWAN",
					"title": "Start SWAN",
					"when": "false"
				},
				{
					"command": "swan.stopSWAN",
					"when": "false",
					"title": "Stop SWAN"
				},
				{
					"command": "swan.compile",
					"when": "false",
					"title": "Compile"
				},
				{
					"command": "swan.runTaintAnalysis",
					"when": "false",
					"title": "Run Taint Analysis"
				}
			]
		},
		"configuration": {
			"title": "SWAN",
			"properties": {
			  "swan.JVMOptions": {
				"type": "string",
				"default": ""
			  },
			  "swan.ProjectType": {
				"type": "string",
				"enum": ["XCode Project", "Single file"],
				"default": "XCode Project"
			  },
			  "swan.SingleFilePath": {
				"type": "string",
				"default": "REPLACE ME",
				"format": "uri",
				"markdownDescription": "Path to the `.swift` file to analyze (\"Single file\" mode)."
			  },
			  "swan.XCodeProjectPath": {
				"type": "string",
				"default": "REPLACE ME",
				"format": "uri",
				"markdownDescription": "Path to your `.xcodeproj` to analyze (\"XCode Project mode\")."
			  },
			  "swan.XCodeOptions": {
				"type": "string",
				"default": "CODE_SIGN_IDENTITY=\"\" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=\"NO\"",
				"markdownDescription": "Extra xcodebuild options. `-project`, `-scheme`, `clean`, `build`, `SWIFT_OPTIMIZATION_LEVEL`, `SWIFT_EXEC`, `SWIFT_COMPILATION_MODE` are already defined elsewhere."
			  },
			  "swan.XCodeScheme": {
				"type": "string",
				"default": "REPLACE ME",
				"markdownDescription": "**REQUIRED:** `-scheme <...>` parameter to `xcodebuild`."
			  },
			  "swan.TaintAnalysisMode": {
				  "type": "boolean",
				  "enum": ["Regular", "Refined"],
				  "default": "Regular",
				  "markdownDescription": "**Regular:** using known sources, sinks, and sanitizers (SSS).  **Refined:** querry-like taint analysis which uses user defined SSS. Can also be used in comibination with known SSS."
			  },
			  "swan.CustomSSS": {
				"type": "object",
				"properties": {
					"swan.Sources": {
						"type": "array",
						"items": {
							"type":"string"
						}
					},
					"swan.Sinks": {
						"type": "array",
						"items": {
							"type":"string"
						}
					},
					"swan.Santizers": {
						"type": "array",
						"items": {
							"type":"string"
						}
					}
				},
				"default": {"swan.Sources":[], "swan.Sinks":[], "swan.Sanitzers":[]},
				"markdownDescription": "Custom sources, sinks, and santizers (SSS) for \"Refined\" mode. If a field is left blank, the default will be used for it. E.g. In \"Refined\" mode, if no sources, a single sink, and no sanitizers are specified by the user, SWAN will find all paths using from the default sources considering the default santizers that go to the user's sink. **NOTE:** A function signature must be prefixed with the name of the file it is in. e.g. `testTaint.source() -> Swift.String` where `testTaint.swift` is the file `source()` is in."
			  }
			}
		  }
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./",
		"pretest": "npm run compile",
		"test": "node ./out/test/runTest.js"
	},
	"devDependencies": {
		"@types/glob": "^7.1.1",
		"@types/mocha": "^5.2.6",
		"@types/node": "^10.12.21",
		"@types/vscode": "^1.38.0",
		"glob": "^7.1.4",
		"mocha": "^6.1.4",
		"typescript": "^3.3.1",
		"tslint": "^5.12.1",
		"vscode-test": "^1.2.0"
	},
	"dependencies": {
		"socket.io": "^2.3.0",
		"socket.io-client": "^2.3.0"
	}
}
